<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[KandanApp]]></title>
  <link href="http://kandanapp.github.com/atom.xml" rel="self"/>
  <link href="http://kandanapp.github.com/"/>
  <updated>2013-02-06T11:00:26-08:00</updated>
  <id>http://kandanapp.github.com/</id>
  <author>
    <name><![CDATA[Kandan Crew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Contribute Code]]></title>
    <link href="http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-code/"/>
    <updated>2013-02-05T15:17:00-08:00</updated>
    <id>http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-code</id>
    <content type="html"><![CDATA[<div class="well">
    <b>Note: </b>This is a living Document. The most recent copy is always available on the <a href="https://github.com/kandanapp/kandan/wiki/How-to-Contribute-Code">Wiki</a>
</div>


<h3>How To Contribute Code</h3>

<p>Whether you&#8217;ve got a bugfix, documentation update, or new feature for us, these are the steps to follow to contribute code back into the main kandan repo.</p>

<p><strong>1. Get the latest code from Github</strong></p>

<p>You&#8217;ll need to understand a little bit about how git and gihub work before this step (if you need an introduction guide, Github [[has a good one|http://learn.github.com/p/intro.html]] you can learn from). In simple terms, log in to github, visit the Kandan project page, and click the &#8220;fork&#8221; button to create your own copy of the repo.  You will push your changes to this new repo under your own github account, and we will pull changes into the main repo from there.</p>

<!-- more -->


<p>For the sake of the rest of the examples in this guide, we&#8217;re going to assume your Github username is &#8221;<strong>GITHUB_USERNAME</strong>&#8221; and use that in our examples.</p>

<p>Now, we want to grab the latest from this newly created repository and pull it down to your local machine. Getting the latest code from your repo is simple, just clone it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/GITHUB_USERNAME/kandan.git
</span><span class='line'><span class="nb">cd </span>kandan
</span></code></pre></td></tr></table></div></figure>


<p>This will give you a directory called &#8220;kandan&#8221; on your local machine with the latest checkout from your fork of the main kandan repo. <strong>Note:</strong> this is <em>not</em> a direct reference to the main kandan repo. When you make changes in your fork, you&#8217;ll need to let us know about it so we can pull it over&#8230;.but that&#8217;s later in the process.</p>

<p><strong>2. Add a remote for the main kandan repo</strong></p>

<p>One thing you&#8217;ll need to do to make things easier to integrate and keep up to date in your fork is to add the main kandan repo as a remote reference. This way you can fetch the latest code from the production version and integrate it. So, here&#8217;s how to set that up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add upstream https://github.com/kandanapp/kandan.git
</span><span class='line'>git remote   <span class="o">(</span>this will list out your remotes, showing the new one we added<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, when you need to pull the latest from the main kandan repo, you just fetch and merge the master branch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git fetch upstream
</span><span class='line'>git merge upstream/master
</span></code></pre></td></tr></table></div></figure>


<p>You can also use <em>git pull upstream master</em> if you want it all in one step.</p>

<p><strong>3. Making a branch for your changes</strong></p>

<p>When adding features or bug fixes, please create a separate branch for each changeset you want us to pull in, either with the issue number in the branch name or with an indication of what the feature is.  For more detailed instructions, read the &#8220;Working with Zend Framework&#8221; section on [[this page|http://framework.zend.com/wiki/display/ZFDEV2/Zend+Framework+Git+Guide]] - we use the same conventions developed by Zend Framework so we refer to their docs rather than maintaining our own!  To create the branch, do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch   <span class="o">(</span>lists your current branches<span class="o">)</span>
</span><span class='line'>git branch my_new_code   <span class="o">(</span>makes a new branch called my_new_code<span class="o">)</span>
</span><span class='line'>git checkout my_new_code
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re working on an issue in the Issues list for the main kandan repo, use the naming convention &#8220;kandan-[issue-num]&#8221; for your branch name to help us keep track of what your patch actually fixes</p>

<p><strong>4. Push your code and make a pull request</strong></p>

<p>When you have finished making your changes, you&#8217;ll need to push up your changes to your fork so we can grab them. With them all committed, push them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push upstream kandan-<span class="o">[</span>issue-num<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This pushes everything in that branch up. Then you can go back over to the main kandan github page and issue a pull request from there.  Tell us what you want us to merge and what it does/fixes, and one of us will pick it up.</p>

<p>That lets us know that there&#8217;s something new from you that needs to be pulled in. We&#8217;ll review it and get back to you about it if we have any questions. Otherwise, we&#8217;ll integrate it and let you know when it&#8217;s in!</p>

<h3>Conclusion</h3>

<p>Hope this guide helps you get started in contributing to the kandan project! If you still have questions, don&#8217;t hesitate to send an email over to admin@kandanapp.com and we&#8217;ll get back to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Contribute Issues]]></title>
    <link href="http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-issues/"/>
    <updated>2013-02-05T14:07:00-08:00</updated>
    <id>http://kandanapp.github.com/blog/2013/02/05/how-to-contribute-issues</id>
    <content type="html"><![CDATA[<div class="well">
    <b>Note: </b>This is a living Document. The most recent copy is always available on the <a href="https://github.com/kandanapp/kandan/wiki/How-to-Contribute-Issues">Wiki</a>
</div>


<h3>Overview</h3>

<p>Spotting and reporting genuine issues in our platform is one of the most accessible ways to contribute but, in equal measure, also the most tricky to do well. If you use this guide as reference when you raise a ticket, it will reduce the chance of delays in it reaching our development team.</p>

<h3>Searching Issues</h3>

<p>Tickets for outstanding issues often contain workarounds shared by our development team, or links to threads that provide discussions and solutions between our community members. Otherwise, they will tell you when a fix for a issue was created and the build you need to obtain in order to take advantage of it.</p>

<!-- more -->


<p>It is not necessary to waste time debugging incorrect Kandan behavior that has either already been fixed or has a known workaround. Being familiar with GitHub&#8217;s powerful issue search tool, will enable you to easily access this information.</p>

<h2>Submitting Issues</h2>

<h3>The Issue-Reporting Lifecycle</h3>

<p>We are keenly-committed to being as open to feedback from our community as possible, to ensure that the platform becomes more stable and featureful in the shortest time. It cannot be underestimated how crucial community-reported bugs are to achieving this goal. Hence, if you find a issue, and you are able to reproduce it reliably with a simple use case, then we will be very grateful if you would report it to us.</p>

<p>That said, the creation of tickets in the Issue Tracker should not be taken lightly. The management of each ticket can consume considerable resources, and so inaccurate or bogus submissions take unnecessary time away from what we would all prefer our development teams to be doing - improving the code.</p>

<p>In addition to accuracy, tickets that are concise, complete, unemotional and objective are the ones our teams appreciate the most.</p>

<h3>Issue Tracker Workflow Diagram</h3>

<p><img src="https://raw.github.com/kandanapp/kandan/resources/GH-Issue_Tracker.png" alt="GitHub Issue Tracker Workflow" /></p>

<h3>Creating a Use Case</h3>

<p>A &#8220;use case&#8221; is working code or reproduction scenario that reliably reproduces a specific issue. What sets the quality use cases apart from the rest is that they contain the least possible code while still demonstrating the issue. Take pride in your use case; make it an art!</p>

<p>Being in the habit of writing use cases as part of your troubleshooting process can significantly decrease the time we address your issue. This is because it can differentiate user errors from issues in the platform.</p>

<h3>Creating a Issue</h3>

<ul>
<li>Create a Issue, only after there is no doubt about the issue&#8217;s existence, Create one ticket per issue, bearing the following in mind:

<ul>
<li>keep to the point: concise, complete and factual tickets are the most appreciated</li>
<li>include all the information: without a use case we probably cannot accept your issue</li>
<li>watch your issue</li>
</ul>
</li>
</ul>


<h3>Conclusion</h3>

<p>We do not underestimate the time and conscientiousness involved in raising good issues, and we very much appreciate it. Although we&#8217;d love to chat with you. Adding a ticket asking how to do XYZ probably isn&#8217;t a good idea.</p>

<p>Thank you for all your efforts!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kandan an Open Source Alternative to HipChat]]></title>
    <link href="http://kandanapp.github.com/blog/2013/02/03/kandan-an-open-source-alternative-to-hipchat/"/>
    <updated>2013-02-03T14:37:00-08:00</updated>
    <id>http://kandanapp.github.com/blog/2013/02/03/kandan-an-open-source-alternative-to-hipchat</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Today We&#8217;d like to introduce you to <a href="https://github.com/kandanapp/kandan">Kandan</a> an Open Source alternative to HipChat.</p>

<p>What is Kandan? Kandan is a private chat service for your company or team. You can invite colleagues to share ideas and files in a persistent group chat room or rooms.</p>

<p>Unlike HipChat or other alternatives, Kandan is completely Open Source and can be hosted internally or externally by your organization or by a third party.</p>

<!-- more -->


<h3>Background</h3>

<p>Kandan was originally developed by <a href="http://cloudfuji.com/">Cloudfuji</a> and they started development on it back on March 6th of 2012. Development went pretty fast and furious until about June 4th of 2012. After that there wasn&#8217;t another commit to the repository until some pull requests came in during the month of January of 2013.</p>

<p>In talking with the team at Cloudfuji both <a href="http://jamesrgifford.com/">James Gifford</a> and <a href="http://fusion94.org">Tony Guntharp</a> agreed to take over maintenance of the project.</p>

<h3>Features</h3>

<p>These are features that work out of the box on any provider:</p>

<ul>
<li>Easy deploy to CloudFoundry, Heroku, dotCloud, etc.</li>
<li>Collaborative team chat</li>
<li>Unlimited channels</li>
<li>Embed formats for images and youtube videos with requests for others (twitter, facebook, g+, etc.)</li>
<li>Synchronized sound player - play any audio-tag compatible url for the whole channel (Pending :P)</li>
<li>/me command!</li>
<li>Highly extensible plugin format</li>
</ul>


<h3>Get Involved</h3>

<p>Since Kandan is a fully open-source app, we would appreciate if you dive in and start adding features, fixing bugs (what bugs?), and cleaning up the code.</p>

<p>Make sure you check out these resources as well.</p>

<ul>
<li>GitHub <a href="https://github.com/kandanapp/kandan/issues">Issues Tracker</a></li>
<li>Twitter <a href="https://twitter.com/kandanapp">@kandanapp</a></li>
<li><a href="http://kandan-demo.kandanapp.com/">Kandan Demo</a> (Yes we eat our own DogFood)</li>
</ul>


<p>You can also email us at admin@kandanapp.com</p>

<h3>Conclusion</h3>

<p>We&#8217;re targetting a 1.0 release in just about two weeks time which will primarily consist of bug fixes. After that release we plan on doing regular minor releases that add new features so if there&#8217;s anything you want to see in newer versions please create an <a href="https://github.com/kandanapp/kandan/issues">Issue</a>.</p>
]]></content>
  </entry>
  
</feed>
